#include <stdio.h>
#include <stdlib.h>

int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

int isRelativelyPrime(int a, int b) {
    return gcd(a, b) == 1;
}

void encryptAffineCaesar(char plaintext[], int a, int b) {
    int i;
    char ciphertext[100];

    for (i = 0; plaintext[i] != '\0'; ++i) {
        char currentChar = plaintext[i];

        if (isalpha(currentChar)) {
            char base = isupper(currentChar) ? 'A' : 'a';
            ciphertext[i] = (a * (currentChar - base) + b) % 26 + base;
        } else {
            ciphertext[i] = currentChar;
        }
    }

    ciphertext[i] = '\0';

    printf("Encrypted message: %s\n", ciphertext);
}

int main() {
    char plaintext[100];
    int a, b;

    // Get values of a and b from the user
    printf("Enter the value of a (must be relatively prime to 26): ");
    scanf("%d", &a);

    printf("Enter the value of b (must be between 0 and 25): ");
    scanf("%d", &b);

    // Check conditions
    if (!isRelativelyPrime(a, 26)) {
        printf("Error: a and 26 are not relatively prime.\n");
        return 1;
    }

    if (b < 0 || b >= 26) {
        printf("Error: b must be between 0 and 25.\n");
        return 1;
    }

    // Get the plaintext from the user
    printf("Enter the plaintext: ");
    scanf(" %[^\n]s", plaintext);

    // Encrypt the plaintext using the affine Caesar cipher
    encryptAffineCaesar(plaintext, a, b);

    return 0;
}
