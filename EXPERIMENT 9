#include <stdio.h>
#include <string.h>

#define SIZE 5

// Function to find the position of a given character in the Playfair matrix
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    if (ch == 'J') {
        ch = 'I'; // Treat 'J' as 'I' in the Playfair cipher
    }

    for (*row = 0; *row < SIZE; (*row)++) {
        for (*col = 0; *col < SIZE; (*col)++) {
            if (matrix[*row][*col] == ch) {
                return;
            }
        }
    }
}

// Function to decrypt a Playfair cipher message
void decryptPlayfair(char matrix[SIZE][SIZE], char *message) {
    int len = strlen(message);

    for (int i = 0; i < len; i += 2) {
        int row1, col1, row2, col2;
        findPosition(matrix, message[i], &row1, &col1);
        findPosition(matrix, message[i + 1], &row2, &col2);

        if (row1 == row2) {
            // Same row, shift left
            printf("%c%c", matrix[row1][(col1 + SIZE - 1) % SIZE], matrix[row2][(col2 + SIZE - 1) % SIZE]);
        } else if (col1 == col2) {
            // Same column, shift up
            printf("%c%c", matrix[(row1 + SIZE - 1) % SIZE][col1], matrix[(row2 + SIZE - 1) % SIZE][col2]);
        } else {
            // Form a rectangle, swap columns
            printf("%c%c", matrix[row1][col2], matrix[row2][col1]);
        }
    }

    printf("\n");
}

int main() {
    char playfairMatrix[SIZE][SIZE] = {
        {'K', 'X', 'J', 'E', 'Y'},
        {'U', 'R', 'E', 'B', 'E'},
        {'Z', 'W', 'E', 'H', 'E'},
        {'W', 'R', 'Y', 'T', 'U'},
        {'H', 'E', 'Y', 'F', 'S'}
    };

    char encryptedMessage[] = "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPOBOTEIZONTXBYBNTGONEYCUZWRGDSONSXBOUYWRHEBAAHYUSEDQ";

    printf("Decrypted Message:\n");
    decryptPlayfair(playfairMatrix, encryptedMessage);

    return 0;
}
