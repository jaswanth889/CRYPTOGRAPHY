#include <stdio.h>
#include <stdint.h>

// Function to calculate the greatest common divisor (GCD) using Euclid's algorithm
int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Function to perform common modulus attack
void common_modulus_attack(int e, int n, int ciphertext, int common_factor) {
    // Calculate the private key using the common factor
    int phi_n = (common_factor - 1) * (n / common_factor - 1);
    int d = 0;

    while ((d * e) % phi_n != 1) {
        d++;
    }

    // Decrypt the ciphertext
    int decrypted_block = 1;
    for (int i = 0; i < d; i++) {
        decrypted_block = (decrypted_block * ciphertext) % n;
    }

    // Display the results
    printf("Recovered Private Key (d): %d\n", d);
    printf("Decrypted Block: %d\n", decrypted_block);
}

int main() {
    // Given public key
    int e = 65537;  // Commonly used public exponent
    int n = 26513;  // Replace with the actual n value

    // Ciphertext block and known common factor
    int ciphertext = 1234;
    int common_factor = 37;  // Replace with the known common factor

    // Perform common modulus attack
    common_modulus_attack(e, n, ciphertext, common_factor);

    return 0;
}
