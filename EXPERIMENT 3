#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 5

// Function to create the Playfair matrix
void createPlayfairMatrix(char key[], char matrix[SIZE][SIZE]) {
    char *keyPtr, *matrixPtr;
    int i, j, k, flag = 0;

    // Initialize matrix with 0
    for (i = 0; i < SIZE; ++i) {
        for (j = 0; j < SIZE; ++j) {
            matrix[i][j] = 0;
        }
    }

    // Fill in the keyword
    keyPtr = key;
    matrixPtr = (char *)matrix;

    for (; *keyPtr != '\0'; ++keyPtr) {
        if (*keyPtr < 'J' || *keyPtr > 'Z') {
            continue;
        }

        if (!flag) {
            *matrixPtr++ = *keyPtr;
            flag = 1;
        } else {
            --matrixPtr;
            flag = 0;
        }
    }

    // Fill in the remaining alphabet
    for (k = 'A'; k <= 'Z' && matrixPtr <= (char *)matrix + SIZE * SIZE - 1; ++k) {
        if (k == 'J') {
            continue;
        }

        if (strchr(key, k) == NULL) {
            *matrixPtr++ = k;
        }
    }
}

// Function to find the position of a character in the Playfair matrix
void findPosition(char matrix[SIZE][SIZE], char ch, int *row, int *col) {
    int i, j;

    for (i = 0; i < SIZE; ++i) {
        for (j = 0; j < SIZE; ++j) {
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to encrypt using Playfair cipher
void encryptPlayfair(char matrix[SIZE][SIZE], char plaintext[]) {
    int len = strlen(plaintext);
    char ciphertext[len * 2];
    int i, row1, col1, row2, col2;

    // Initialize ciphertext
    ciphertext[0] = '\0';

    // Process two characters at a time
    for (i = 0; i < len; i += 2) {
        // Find positions of the two characters in the matrix
        findPosition(matrix, plaintext[i], &row1, &col1);
        findPosition(matrix, plaintext[i + 1], &row2, &col2);

        // Case 1: same row
        if (row1 == row2) {
            ciphertext[i] = matrix[row1][(col1 + 1) % SIZE];
            ciphertext[i + 1] = matrix[row2][(col2 + 1) % SIZE];
        }
        // Case 2: same column
        else if (col1 == col2) {
            ciphertext[i] = matrix[(row1 + 1) % SIZE][col1];
            ciphertext[i + 1] = matrix[(row2 + 1) % SIZE][col2];
        }
        // Case 3: different row and column
        else {
            ciphertext[i] = matrix[row1][col2];
            ciphertext[i + 1] = matrix[row2][col1];
        }
    }

    ciphertext[len * 2] = '\0';

    printf("Encrypted message: %s\n", ciphertext);
}

int main() {
    char key[20];
    char matrix[SIZE][SIZE];
    char plaintext[100];

    // Get the keyword from the user
    printf("Enter the keyword (no spaces, only uppercase letters): ");
    scanf("%s", key);

    // Get rid of any characters after the first 20 (if the keyword is longer)
    key[20] = '\0';

    // Get the plaintext from the user
    printf("Enter the plaintext (uppercase, even number of characters): ");
    scanf("%s", plaintext);

    // Create the Playfair matrix
    createPlayfairMatrix(key, matrix);

    // Encrypt the plaintext
    encryptPlayfair(matrix, plaintext);

    return 0;
}
