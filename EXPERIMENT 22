#include <stdio.h>
#include <stdint.h>

// S-DES Key
uint8_t key[10] = {0, 1, 1, 1, 1, 1, 1, 0, 1, 0};

// Initial Vector for CBC
uint8_t iv[8] = {1, 0, 1, 0, 1, 0, 1, 0};

// Permutation P10
void permute_p10(uint8_t *key, uint8_t *permuted_key) {
    permuted_key[0] = key[2];
    permuted_key[1] = key[4];
    permuted_key[2] = key[1];
    permuted_key[3] = key[6];
    permuted_key[4] = key[3];
    permuted_key[5] = key[9];
    permuted_key[6] = key[0];
    permuted_key[7] = key[8];
    permuted_key[8] = key[7];
    permuted_key[9] = key[5];
}

// Circular Left Shift (LS-1) on a 10-bit key
void circular_left_shift_1(uint8_t *key) {
    uint8_t temp = key[0];
    for (int i = 0; i < 9; ++i) {
        key[i] = key[i + 1];
    }
    key[9] = temp;
}

// Permutation P8
void permute_p8(uint8_t *key, uint8_t *permuted_key) {
    permuted_key[0] = key[5];
    permuted_key[1] = key[2];
    permuted_key[2] = key[6];
    permuted_key[3] = key[3];
    permuted_key[4] = key[7];
    permuted_key[5] = key[4];
    permuted_key[6] = key[9];
    permuted_key[7] = key[8];
}

// Initial Permutation IP
void initial_permutation(uint8_t *plaintext, uint8_t *permuted_plaintext) {
    permuted_plaintext[0] = plaintext[1];
    permuted_plaintext[1] = plaintext[5];
    permuted_plaintext[2] = plaintext[2];
    permuted_plaintext[3] = plaintext[0];
    permuted_plaintext[4] = plaintext[3];
    permuted_plaintext[5] = plaintext[7];
    permuted_plaintext[6] = plaintext[4];
    permuted_plaintext[7] = plaintext[6];
}

// Expansion P4
void expansion_p4(uint8_t *half_block, uint8_t *expanded_half_block) {
    expanded_half_block[0] = half_block[3];
    expanded_half_block[1] = half_block[0];
    expanded_half_block[2] = half_block[1];
    expanded_half_block[3] = half_block[2];
    expanded_half_block[4] = half_block[1];
    expanded_half_block[5] = half_block[2];
    expanded_half_block[6] = half_block[3];
    expanded_half_block[7] = half_block[0];
}

// XOR operation on two 4-bit blocks
void xor_4bit(uint8_t *block1, uint8_t *block2, uint8_t *result) {
    for (int i = 0; i < 4; ++i) {
        result[i] = block1[i] ^ block2[i];
    }
}

// S-Box substitution
void sbox_substitution(uint8_t *input, uint8_t *output) {
    // S-Box for S0
    uint8_t s0[4][4] = {
        {1, 0, 3, 2},
        {3, 2, 1, 0},
        {0, 2, 1, 3},
        {3, 1, 3, 2}
    };

    // S-Box for S1
    uint8_t s1[4][4] = {
        {0, 1, 2, 3},
        {2, 0, 1, 3},
        {3, 0, 1, 0},
        {2, 1, 0, 3}
    };

    // Split the 4-bit input into two halves
    uint8_t left_half[2] = {input[0], input[1]};
    uint8_t right_half[2] = {input[2], input[3]};

    // Calculate the row and column indices for S0 and S1
    int row_s0 = left_half[0] * 2 + left_half[1];
    int col_s0 = right_half[0] * 2 + right_half[1];

    int row_s1 = left_half[1] * 2 + right_half[0];
    int col_s1 = right_half[1] * 2 + right_half[0];

    // Perform S-Box substitution
    output[0] = s0[row_s0][col_s0];
    output[1] = s1[row_s1][col_s1];
}

// Permutation P4
void permutation_p4(uint8_t *input, uint8_t *output) {
    output[0] = input[1];
    output[1] = input[3];
    output[2] = input[2];
    output[3] = input[0];
}

// Function to perform the F function in S-DES
void sdes_f_function(uint8_t *right_half, uint8_t *key, uint8_t *result) {
    // Expand the 4-bit right half to 8 bits
    uint8_t expanded_right[8];
    expansion_p4(right_half, expanded_right);

    // XOR with the key
    uint8_t xor_result[8];
    xor_4bit(expanded_right, key, xor_result);

    // S-Box substitution
    uint8_t sbox_output[2];
    sbox_substitution(xor_result, sbox_output);

    // Permutation P4
    permutation_p4(sbox_output, result);
}

// Function to perform the S-DES encryption
void sdes_encrypt(uint8_t *plaintext, uint8_t *key, uint8_t *iv, uint8_t *ciphertext) {
    // Generate round keys
    uint8_t round_key1[8];
    uint8_t round_key2[8];

    // Initial Permutation
    uint8_t permuted_plaintext[8];
    initial_permutation(plaintext, permuted_plaintext);

    // Generate round keys
    uint8_t permuted_key
